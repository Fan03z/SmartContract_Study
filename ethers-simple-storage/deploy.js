// 声明变量为导入ethers包
const ethers = require("ethers");
const fs = require("fs-extra");
require("dotenv").config();
// ES6语法:
// import { providers, Wallet } from "ethers";
// import fs from "fs-extra";
// import "dotenv/config";

async function main() {
  // ganache上的本地假区块链url:
  // http://127.0.0.1:7545
  // alchemy上test-Demo-app连接上的Goerli测试网url:
  // https://eth-goerli.g.alchemy.com/v2/_q7zkCeh0uKoaHSou7p0ke0dqVwata52
  // 利用ethers中的函数,将脚本连接到区块链url
  const provider = new ethers.providers.JsonRpcBatchProvider(
    process.env.GOERLI_TEST_RPC_URL
  );

  // 定义带私钥的钱包
  // 私钥不外漏,因此放环境变量文件.env中进行访问得到
  // 错误示例:
  // const wallet = new ethers.Wallet(
  //   "12695704ee586da75120b2f1007882566c8f1844ed7ab2e99ee8a58392f40a48",
  //   provider
  // );
  // 同样可以使用经加密后的私钥
  // 错误示例:
  const wallet = new ethers.Wallet(
    process.env.MetaMask_TEST_PRIVATE_KEY,
    provider
  );

  /*
  // 这个麻烦和安全些但现在测试学习阶段,先注释起来,暂时先用粗旷的
  // 读取储存加密后密钥的文件
  const encryptedJson = fs.readFileSync("./.encryptedKey.json", "utf8");
  // 定义钱包,其私钥为用加密密码解密后的私钥
  let wallet = new ethers.Wallet.fromEncryptedJsonSync(
    encryptedJson,
    process.env.process.env.PRIVATE_KEY_PASSWORD
  );
  // 将钱包与区块链provider连接
  wallet = await wallet.connect(provider);
  */

  // compile编译后就会产生abi和二进制文件
  // 同步读取文件abi和二进制文件
  const abi = fs.readFileSync("./SimpleStorage_sol_SimpleStorage.abi", "utf8");
  const binary = fs.readFileSync(
    "./SimpleStorage_sol_SimpleStorage.bin",
    "utf8"
  );
  const contractFactory = new ethers.ContractFactory(abi, binary, wallet);

  console.log("Deploying.please wait...");

  // 暂停执行代码,等待合约部署
  const contract = await contractFactory.deploy();
  // deploy( {} )内可以放入一些对象声明,例如deploy({gasLimit:100000})

  // console.log("合约:")
  // console.log(contract);

  console.log("合约地址:");
  console.log(contract.address);

  // 暂停执行代码,等待第一份交易成功
  const transactionmentReceipt = await contract.deployTransaction.wait(1);

  // console.log("合约部署事务 (创建交易时得到):");
  // console.log(contract.deployTransaction);

  // console.log("合约交易收据 (等待区块确认交易后得到):");
  // console.log(transactionmentReceipt);

  /*
  console.log("只通过自定义交易数据来完成合约部署");

  // 自定义交易信息
  const nonce = await wallet.getTransactionCount();
  const tx = {
    // 记录账户交易次数,用于区块防伪交易,
    // 与BTC中的挖矿求解的随机数同名,但二者不同含义
    nonce: nonce,
    gasPrice: 20000000000,
    gasLimit: 500000,
    // 此处为部署合约,无转账行为,故to为null、value为0
    to: null,
    value: 0,
    // data为 "0x" + 二进制数据文件内容
    data: "0x608060405234801561001057600080fd5b50610771806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80632e64cec11461005c5780636057361d1461007a5780636f760f41146100965780638bab8dd5146100b25780639e7a13ad146100e2575b600080fd5b610064610113565b604051610071919061052a565b60405180910390f35b610094600480360381019061008f919061046d565b61011c565b005b6100b060048036038101906100ab9190610411565b610126565b005b6100cc60048036038101906100c791906103c8565b6101b6565b6040516100d9919061052a565b60405180910390f35b6100fc60048036038101906100f7919061046d565b6101e4565b60405161010a929190610545565b60405180910390f35b60008054905090565b8060008190555050565b6001604051806040016040528083815260200184815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000155602082015181600101908051906020019061018c9291906102a0565b505050806002836040516101a09190610513565b9081526020016040518091039020819055505050565b6002818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b600181815481106101f457600080fd5b906000526020600020906002020160009150905080600001549080600101805461021d9061063e565b80601f01602080910402602001604051908101604052809291908181526020018280546102499061063e565b80156102965780601f1061026b57610100808354040283529160200191610296565b820191906000526020600020905b81548152906001019060200180831161027957829003601f168201915b5050505050905082565b8280546102ac9061063e565b90600052602060002090601f0160209004810192826102ce5760008555610315565b82601f106102e757805160ff1916838001178555610315565b82800160010185558215610315579182015b828111156103145782518255916020019190600101906102f9565b5b5090506103229190610326565b5090565b5b8082111561033f576000816000905550600101610327565b5090565b60006103566103518461059a565b610575565b90508281526020810184848401111561037257610371610704565b5b61037d8482856105fc565b509392505050565b600082601f83011261039a576103996106ff565b5b81356103aa848260208601610343565b91505092915050565b6000813590506103c281610724565b92915050565b6000602082840312156103de576103dd61070e565b5b600082013567ffffffffffffffff8111156103fc576103fb610709565b5b61040884828501610385565b91505092915050565b600080604083850312156104285761042761070e565b5b600083013567ffffffffffffffff81111561044657610445610709565b5b61045285828601610385565b9250506020610463858286016103b3565b9150509250929050565b6000602082840312156104835761048261070e565b5b6000610491848285016103b3565b91505092915050565b60006104a5826105cb565b6104af81856105d6565b93506104bf81856020860161060b565b6104c881610713565b840191505092915050565b60006104de826105cb565b6104e881856105e7565b93506104f881856020860161060b565b80840191505092915050565b61050d816105f2565b82525050565b600061051f82846104d3565b915081905092915050565b600060208201905061053f6000830184610504565b92915050565b600060408201905061055a6000830185610504565b818103602083015261056c818461049a565b90509392505050565b600061057f610590565b905061058b8282610670565b919050565b6000604051905090565b600067ffffffffffffffff8211156105b5576105b46106d0565b5b6105be82610713565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000819050919050565b82818337600083830152505050565b60005b8381101561062957808201518184015260208101905061060e565b83811115610638576000848401525b50505050565b6000600282049050600182168061065657607f821691505b6020821081141561066a576106696106a1565b5b50919050565b61067982610713565b810181811067ffffffffffffffff82111715610698576106976106d0565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b61072d816105f2565b811461073857600080fd5b5056fea26469706673582212204a44a04e03979a5797d609da97f717eda150aef31bfc2baacf2e974d4ba4a7c064736f6c63430008070033",
    // chainId 是每条区块链对应的id,链不同id不同
    chainId: 1337,
  };

  // 钱包签署交易
  const sendTxResponse = await wallet.sendTransaction(tx);
  // 暂停执行代码,等待一次交易成功
  await sendTxResponse.wait(1);

  console.log("钱包发送的定义交易:");
  console.log(sendTxResponse);
*/

  // 调用合约内的retrieve(),检索favoriteNumber的值
  const currentFavoriteNumber = await contract.retrieve();
  // 打印favoriteNumber
  // console.log(currentFavoriteNumber.toString());

  // 调用合约内的store函数,为favoriteNumber赋值
  const transactionResponse = await contract.store("7");
  const transactionReceipt = await transactionResponse.wait(1);

  const updatedFavoriteNumber = await contract.retrieve();
  // 打印 更新 favoriteNumber
  console.log(updatedFavoriteNumber.toString());
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.log(error);
  });
